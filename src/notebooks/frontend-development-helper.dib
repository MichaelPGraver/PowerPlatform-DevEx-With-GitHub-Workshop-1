#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"pwsh","name":"pwsh"}]}}

#!markdown

# Frontend development helper

This notebook is a helper for frontend development.

It will provide you with the key elements to setup your frontend development workspace.

#!markdown

## 0. Prerequisites

#!markdown

The command we will use in this notebook are mostly related to [Power Platform CLI](https://learn.microsoft.com/en-us/power-platform/developer/cli/introduction).

One of the easiest way to install it with our current configuration if it is not already present is trough the dotnet cli.

#!pwsh

Write-Host "Checking if Power Platform CLI is installed..." -ForegroundColor Blue

try {
    $powerPlatformCliVersion = pac help
} catch {
    Write-Host "Power Platform CLI does not seem installed. Installing..." -ForegroundColor Blue
    dotnet tool install --global Microsoft.PowerApps.CLI.Tool
}

Write-Host "üëçüèº Power Platform CLI is installed!" -ForegroundColor Green

#!markdown

## 1. Initialize a Power Platform solution

#!markdown

To initialize a Power Platform solution, we will use the `pac solution init` command as described below:

```bash
Initializes a directory with a new Dataverse solution project

Commands: 
Usage: pac solution init --publisher-name --publisher-prefix [--outputDirectory]

  --publisher-name            Name of the Dataverse solution publisher (alias: -pn)
  --publisher-prefix          Customization prefix value for the Dataverse solution publisher (alias: -pp)
  --outputDirectory           Output directory (alias: -o)
```

#!pwsh

#!set --name solutionName --value @input:"Please enter a Power Platform solution name"

#!pwsh

#!set --name publisherName --value @input:"Please enter a publisher name"

#!pwsh

#!set --name publisherPrefix --value @input:"Please enter a publisher prefix"

#!pwsh

Write-Host "Validate that all required inputs have been provided..." -ForegroundColor Blue

if (-not $solutionName -or $solutionName -eq "") {
    Write-Host "Please provide a solution name." -ForegroundColor Red
    exit 1
}

if (-not $publisherName -or $publisherName -eq "") {
    Write-Host "Please provide a publisher name." -ForegroundColor Red
    exit 1
}

if (-not $publisherPrefix -or $publisherPrefix -eq "") {
    Write-Host "Please provide a publisher prefix." -ForegroundColor Red
    exit 1
}

Write-Host "Move to the src/solutions/ folder..." -ForegroundColor Blue
cd ../solutions

Write-Host "Create a new folder with the provided name for the solution and move into it..." -ForegroundColor Blue
mkdir $solutionName
cd $solutionName

Write-Host "Initialization of the Power Platform solution..." -ForegroundColor Blue
pac solution init --publisher-name $publisherName --publisher-prefix $publisherPrefix

Write-Host "üëçüèº Power Platform solution initialized!" -ForegroundColor Green

#!markdown

## 2. Initialize a new PCF component

#!markdown

To initialize a PCF component, we will use the `pac pck init` command as described below:

```bash
Initializes a directory with a new Power Apps component framework project

Commands: 
Usage: pac pcf init [--namespace] [--name] [--template] [--framework] [--outputDirectory] [--run-npm-install]

  --namespace                 The namespace for the component. (alias: -ns)
  --name                      The name for the component. (alias: -n)
  --template                  Choose a template for the component. (alias: -t)
                              Values: field, dataset
  --framework                 The rendering framework for control. The default value is 'none', which means HTML. (alias: -fw)
                              Values: none, react
  --outputDirectory           Output directory (alias: -o)
  --run-npm-install           Auto run 'npm install' after the control is created. The default value is 'false'. (alias: -npm)
```

#!pwsh

#!set --name pcfNamespace --value @input:"Please enter a namespace for the PCF component"

#!pwsh

#!set --name pcfName --value @input:"Please enter a name for the PCF component"

#!csharp

using Microsoft.DotNet.Interactive;

var maxAttempts = 3;
var pcfTemplate = "";

for (int attempt = 1; attempt <= maxAttempts; attempt++)
{
    pcfTemplate = await Kernel.GetInputAsync("Please select the template for the PCF component (Values: field, dataset)");

    if (pcfTemplate == "field" || pcfTemplate == "dataset")
    {
        break;
    }
    else
    {
        Console.WriteLine($"Invalid input. Attempt {attempt} of {maxAttempts}.");
    }
}

// If maximum of attempts has been reached and the input is still invalid, exit the script with an error message
if (pcfTemplate != "field" && pcfTemplate != "dataset")
{
    if (pcfTemplate != "field" && pcfTemplate != "dataset")
    {
        throw new Exception("Invalid input. Maximum attempts reached.");
    }
}

#!pwsh

#!set --value @csharp:pcfTemplate --name pcfTemplate

#!pwsh

Write-Host "Validate that all required inputs have been provided..." -ForegroundColor Blue

if (-not $pcfNamespace -or $pcfNamespace -eq "") {
    Write-Host "Please provide a namespace for the PCF component." -ForegroundColor Red
    exit 1
}

if (-not $pcfName -or $pcfName -eq "") {
    Write-Host "Please provide a name for the PCF component." -ForegroundColor Red
    exit 1
}

Write-Host "Move to the src/pcf-components/ folder..." -ForegroundColor Blue
cd ../pcf-components

Write-Host "Initialize new PCF component..." -ForegroundColor Blue
pac pcf init --namespace $pcfNamespace --name $pcfName --template $pcfTemplate --framework react --outputDirectory ./ --run-npm-install

Write-Host "üëçüèº PCF component initialized!" -ForegroundColor Green

#!markdown

## 3. Add the new PCF component to the solution
